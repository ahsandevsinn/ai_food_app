import 'dart:convert';

import 'package:ai_food/Constants/apikey.dart';
import 'package:ai_food/Constants/app_logger.dart';
import 'package:ai_food/Model/demo/ChatgptModel.dart';
import 'package:ai_food/Model/demo/MessageModel.dart';
import 'package:ai_food/Utils/logout.dart';
import 'package:ai_food/Utils/resources/res/app_theme.dart';
import 'package:ai_food/Utils/utils.dart';
import 'package:ai_food/Utils/widgets/others/app_button.dart';
import 'package:ai_food/Utils/widgets/others/app_text.dart';
import 'package:ai_food/Utils/widgets/others/errordialogue.dart';
import 'package:ai_food/View/HomeScreen/widgets/providers/chat_bot_provider.dart';
import 'package:ai_food/View/recipe_info/recipe_info.dart';
import 'package:ai_food/config/app_urls.dart';
import 'package:ai_food/config/dio/app_dio.dart';
import 'package:ai_food/config/dio/spoonacular_app_dio.dart';
import 'package:ai_food/config/keys/pref_keys.dart';
import 'package:ai_food/main.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:dio/dio.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';

import 'result_container_askMaida.dart';

final GlobalKey<ScaffoldMessengerState> scaffoldMessengerKey =
    GlobalKey<ScaffoldMessengerState>();

class AskMaidaScreen extends StatefulWidget {
  const AskMaidaScreen({Key? key}) : super(key: key);

  @override
  State<AskMaidaScreen> createState() => _AskMaidaScreenState();
}

class _AskMaidaScreenState extends State<AskMaidaScreen>
    with AutomaticKeepAliveClientMixin {
  bool get wantKeepAlive => true;
  final TextEditingController _messageController = TextEditingController();
  late ScrollController _scrollController;
  late AppDio dio;
  late SpoonAcularAppDio spoonDio;
  AppLogger logger = AppLogger();
  var queryText;
  var savePreviousQuery;
  String id = "";
  bool checkScroll = false;
  bool disableScroll = false;
  var current_page=1;
  var total_page=0;
  bool isLoadingMore = false;
  List<ChatData> list = <ChatData>[];

  //new api data adding
  @override
  void initState() {
    dio = AppDio(context);
    spoonDio = SpoonAcularAppDio(context);
    logger.init();

    changeCondition();
    getDatafromAPI(current_page);
    //clearChatProvider.displayChatsWidget;

    _scrollController = ScrollController();
    super.initState();
  }

  @override
  void dispose() {
    _messageController.dispose();
    _scrollController.dispose();
    // Future.microtask(() {
    //   clearChatProvider.clearDisplayChatsWidget();
    // });
    super.dispose();
  }

  void scrollToBottom() {
    final bottomOffset = _scrollController.position.maxScrollExtent;
    _scrollController.animateTo(
      bottomOffset,
      duration: const Duration(milliseconds: 1000),
      curve: Curves.easeInOut,
    );
  }
  void scrollToBottom2() {
    final bottomOffset = _scrollController.position.maxScrollExtent;
    _scrollController.jumpTo(bottomOffset);
  }

  @override
  Widget build(BuildContext context) {
    super.build(context);
    final loadingProvider = Provider.of<ChatBotProvider>(context, listen: true);
    return GestureDetector(
      onTap: () {
        FocusScope.of(context).requestFocus(FocusNode());
      },
      child: Scaffold(
        key: scaffoldMessengerKey,
        backgroundColor: Colors.black.withOpacity(0.1),
        // floatingActionButton: FloatingActionButton(onPressed: () {
        //   getRecipeInformation(id:);
        // }),
        appBar: AppBar(
          backgroundColor: Colors.white,
          centerTitle: true,
          title: Text(
            "Ask Maida",
            style: TextStyle(
                color: AppTheme.appColor,
                fontWeight: FontWeight.w600,
                fontSize: 24),
          ),
        ),
        body: Container(
          decoration: BoxDecoration(
              image: DecorationImage(
                  image: AssetImage("assets/images/logo.png"),
                  scale: 0.5,
                  opacity: 0.25)),
          child: Column(
            children: [
              Visibility(
                visible: loadingProvider.iscontainer,
                child: Container(
                  margin: const EdgeInsets.symmetric(vertical: 20),
                  width: MediaQuery.of(context).size.width * 0.7,
                  height: 80,
                  decoration: BoxDecoration(
                    color: AppTheme.appColor,
                    borderRadius: BorderRadius.circular(10),
                  ),
                  child: Center(
                    child: Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 8.0),
                      child: AppText.appText(
                        textAlign: TextAlign.center,
                        "There are instances where errors may be generated by the AI.",
                        textColor: AppTheme.whiteColor,
                        fontSize: 16,
                      ),
                    ),
                  ),
                ),
              ),
              Expanded(
                child: NotificationListener<ScrollNotification>(
                  onNotification: (ScrollNotification scrollInfo) {
                    print("Load more data: $isLoadingMore $current_page $total_page");

                    // Check if scrolling at the top, not currently loading, and there are more pages to load
                    if (scrollInfo.metrics.pixels == 0 && !isLoadingMore && current_page < total_page) {
                      // Set loading flag to prevent multiple calls
                      isLoadingMore = true;

                      // Increment the page number
                      current_page++;

                      // Call the function to get more data

                      setState(() {
                        disableScroll = true;
                      });

                      getDatafromAPI(current_page);

                      print("Load more data triggered");
                    }

                    return false;
                  },
                  child: Consumer<ChatBotProvider>(
                    builder: (context, chatProvider, _) {
                      WidgetsBinding.instance.addPostFrameCallback((_) {
                        if(checkScroll) {
                          scrollToBottom();
                          scrollToBottom2();
                        }else{
                          scrollToBottom();
                        }
                      });
                     // ScrollController _scrollController = ScrollController();

                      return ListView.builder(
                        controller: _scrollController,
                        itemCount: chatProvider.displayChatsWidget.length,
                        //reverse: true, // Display latest messages at the bottom
                        itemBuilder: (BuildContext context, int index) {
                          if (index == 0) {
                            return Column(
                              children: [
                                Container(
                                  margin: const EdgeInsets.symmetric(vertical: 20),
                                  width: MediaQuery.of(context).size.width * 0.7,
                                  height: 80,
                                  decoration: BoxDecoration(
                                    color: AppTheme.appColor,
                                    borderRadius: BorderRadius.circular(10),
                                  ),
                                  child: Center(
                                    child: Padding(
                                      padding: const EdgeInsets.symmetric(horizontal: 8.0),
                                      child: AppText.appText(
                                        textAlign: TextAlign.center,
                                        "There are instances where errors may be generated by the AI.",
                                        textColor: AppTheme.whiteColor,
                                        fontSize: 16,
                                      ),
                                    ),
                                  ),
                                ),
                                chatProvider.displayChatsWidget[index],
                              ],
                            );
                          } else {
                            return chatProvider.displayChatsWidget[index];
                          }
                        },
                        addAutomaticKeepAlives: true,
                      );
                    },
                  ),
                ),
              ),


              // Expanded(
              //   child: Consumer<ChatBotProvider>(
              //     builder: (context, chatProvider, _) {
              //       WidgetsBinding.instance.addPostFrameCallback((_) {
              //         checkScroll == true?scrollToBottom2():scrollToBottom();
              //       });
              //       return ListView.builder(
              //         controller: _scrollController,
              //         itemCount: chatProvider.displayChatsWidget.length,
              //         itemBuilder: (BuildContext context, int index) {
              //           if (index == 0) {
              //             return Column(
              //               children: [
              //                 Container(
              //                   margin:
              //                       const EdgeInsets.symmetric(vertical: 20),
              //                   width: MediaQuery.of(context).size.width * 0.7,
              //                   height: 80,
              //                   decoration: BoxDecoration(
              //                     color: AppTheme.appColor,
              //                     borderRadius: BorderRadius.circular(10),
              //                   ),
              //                   child: Center(
              //                     child: Padding(
              //                       padding: const EdgeInsets.symmetric(
              //                           horizontal: 8.0),
              //                       child: AppText.appText(
              //                         textAlign: TextAlign.center,
              //                         "There are instances where errors may be generated by the AI.",
              //                         textColor: AppTheme.whiteColor,
              //                         fontSize: 16,
              //                       ),
              //                     ),
              //                   ),
              //                 ),
              //                 chatProvider.displayChatsWidget[index],
              //               ],
              //             );
              //           } else {
              //             return chatProvider.displayChatsWidget[index];
              //           }
              //         },
              //         addAutomaticKeepAlives: true,
              //       );
              //     },
              //   ),
              // ),
              const SizedBox(height: 10),
              Padding(
                padding:
                    const EdgeInsets.symmetric(horizontal: 8.0, vertical: 6),
                child: Row(
                  children: [
                    Expanded(
                      child: Column(
                        children: [
                          loadingProvider.isLoading
                              ? Image.asset(
                                  "assets/images/loader.gif",

                                  // width: 100,
                                  height: 50,
                                  color: AppTheme.appColor,
                                )
                              : const SizedBox.shrink(),
                          Align(
                            alignment: Alignment.center,
                            child: Visibility(
                              visible: loadingProvider.regenerateLoader,
                              child: InkWell(
                                onTap: () {
                                  setState(() {
                                    queryText = "more ${savePreviousQuery}";
                                  });
                                  chatBotTalk();
                                },
                                child: Container(
                                  height: 35,
                                  decoration: BoxDecoration(
                                    color: AppTheme.whiteColor,
                                    borderRadius: BorderRadius.circular(50),
                                    border:
                                        Border.all(color: AppTheme.appColor),
                                  ),
                                  child: Padding(
                                    padding: const EdgeInsets.only(
                                        left: 10.0, right: 10),
                                    child: Row(
                                      mainAxisSize: MainAxisSize.min,
                                      mainAxisAlignment:
                                          MainAxisAlignment.spaceBetween,
                                      children: [
                                        Icon(
                                          Icons.autorenew,
                                          color: AppTheme.appColor,
                                          size: 18,
                                        ),
                                        const SizedBox(
                                          width: 4,
                                        ),
                                        AppText.appText(
                                          "Regenerate result",
                                          fontSize: 12,
                                          fontWeight: FontWeight.w600,
                                          textColor: AppTheme.appColor,
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                              ),
                            ),
                          ),
                          const SizedBox(
                            height: 10,
                          ),
                          TextField(
                            onSubmitted: (value) {
                              queryText = null;
                              if (_messageController.text.isNotEmpty) {
                                savePreviousQuery = _messageController.text;
                                chatBotTalk();
                              }
                            },
                            onChanged: (value) {
                              loadingProvider.regenerateLoaderLoading(false);
                            },
                            controller: _messageController,
                            cursorColor: AppTheme.whiteColor,
                            keyboardType: TextInputType.multiline,
                            textInputAction: TextInputAction.done,
                            minLines: 1,
                            maxLines: 3,
                            style: TextStyle(color: AppTheme.whiteColor),
                            decoration: InputDecoration(
                              contentPadding: const EdgeInsets.only(
                                  left: 30.0, top: 4, bottom: 4),
                              fillColor: AppTheme.appColor,
                              filled: true,
                              hintText: "Enter query...",
                              hintStyle: const TextStyle(
                                color: Color(0x80FFFFFF),
                              ),
                              border: const OutlineInputBorder(
                                borderRadius:
                                    BorderRadius.all(Radius.circular(80.0)),
                              ),
                              focusedBorder: const OutlineInputBorder(
                                borderRadius:
                                    BorderRadius.all(Radius.circular(80)),
                                borderSide: BorderSide(
                                    width: 1, color: Colors.transparent),
                              ),
                              enabledBorder: const OutlineInputBorder(
                                borderRadius:
                                    BorderRadius.all(Radius.circular(80)),
                                borderSide: BorderSide(
                                    width: 1, color: Colors.transparent),
                              ),
                              suffixIcon: Padding(
                                padding: const EdgeInsets.only(right: 15.0),
                                child: GestureDetector(
                                  onTap: () {
                                    setState(() {
                                      queryText = null;
                                      savePreviousQuery =
                                          _messageController.text;
                                    });

                                    if (_messageController.text.isNotEmpty) {
                                      chatBotTalk();
                                    }
                                  },
                                  child: Icon(
                                    Icons.send_outlined,
                                    color: AppTheme.whiteColor,
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  chatBotTalk() async {
    Dio dio = Dio();
    var response;
    final chatsProvider = Provider.of<ChatBotProvider>(context, listen: false);

    setState(() {
      checkScroll = false;
      disableScroll = false;
    });
    chatsProvider.containerLoading(false);
    chatsProvider.displayChatWidgets(
      Stack(
        alignment: Alignment.topRight,
        children: [
          Align(
            alignment: Alignment.topRight,
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 8),
              child: Container(
                margin: const EdgeInsets.symmetric(vertical: 4, horizontal: 14),
                padding:
                    const EdgeInsets.symmetric(vertical: 10, horizontal: 10),
                decoration: BoxDecoration(
                  color: AppTheme.appColor,
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(20),
                    bottomLeft: Radius.circular(20),
                    bottomRight: Radius.circular(10),
                    topRight: Radius.circular(0),
                  ),
                ),
                child: AppText.appText(
                    "${queryText == null ? savePreviousQuery : queryText}",
                    textColor: AppTheme.whiteColor),
              ),
            ),
          ),
        ],
      ),
    );
    _messageController.clear();
    chatsProvider.messageLoading(true);
    sender1QueryResponse(
        query: queryText == null ? savePreviousQuery : queryText);
    Options options = Options(
      headers: {
        'Authorization': '5fb2922a-2a2e-44b5-bec9-73b06a832206',
        'Content-Type': 'application/json',
      },
    );

    // Set up request body
    Map<String, dynamic> data = {
      "ingredients": ["${queryText == null ? savePreviousQuery : queryText}"],
    };

    // Make the Dio request
    response = await dio.post(
      'https://api.chefgpt.xyz/api/generate/recipe-from-ingredients',
      options: options,
      data: data,
    );
    if (response.statusCode == 200) {
      final resData = response.data;

      if (resData != null) {
        chatsProvider.displayChatWidgets(
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Padding(
                padding:
                    const EdgeInsets.symmetric(horizontal: 8.0, vertical: 8),
                child: Container(
                  margin:
                      const EdgeInsets.symmetric(vertical: 4, horizontal: 14),
                  padding:
                      const EdgeInsets.symmetric(vertical: 10, horizontal: 10),
                  decoration: BoxDecoration(
                    color: AppTheme.whiteColor,
                    borderRadius: const BorderRadius.only(
                      topLeft: Radius.circular(0),
                      bottomLeft: Radius.circular(10),
                      bottomRight: Radius.circular(20),
                      topRight: Radius.circular(20),
                    ),
                  ),
                  child: AppText.appText(
                    resData['recipeName'],
                    textColor: AppTheme.appColor,
                  ),
                ),
              ),
              const SizedBox(width: 4),
              Padding(
                padding:
                    const EdgeInsets.symmetric(horizontal: 8.0, vertical: 8),
                child: Container(
                  margin:
                      const EdgeInsets.symmetric(vertical: 4, horizontal: 14),
                  padding:
                      const EdgeInsets.symmetric(vertical: 10, horizontal: 10),
                  decoration: BoxDecoration(
                    color: AppTheme.whiteColor,
                    borderRadius: const BorderRadius.only(
                      topLeft: Radius.circular(0),
                      bottomLeft: Radius.circular(10),
                      bottomRight: Radius.circular(20),
                      topRight: Radius.circular(20),
                    ),
                  ),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      resData['instructions'].isNotEmpty
                          ? AppText.appText("Instructions:",
                              textColor: AppTheme.appColor,
                              fontSize: 20,
                              fontWeight: FontWeight.bold)
                          : SizedBox.shrink(),
                      resData['instructions'].isNotEmpty
                          ? Align(
                              alignment: Alignment.topLeft,
                              child: Column(
                                mainAxisAlignment: MainAxisAlignment.start,
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: resData['instructions']
                                    .map<Widget>(
                                      (item) => Padding(
                                        padding: const EdgeInsets.only(
                                            top: 3, bottom: 3),
                                        child: AppText.appText(
                                          "${item}",
                                          textColor: AppTheme.appColor,
                                        ),
                                      ),
                                    )
                                    .toList(),
                              ),
                            )
                          : SizedBox.shrink(),
                      const SizedBox(width: 4),
                      resData['ingredients'].isNotEmpty
                          ? AppText.appText("Ingredients:",
                              textColor: AppTheme.appColor,
                              fontSize: 20,
                              fontWeight: FontWeight.bold)
                          : SizedBox.shrink(),
                      resData['ingredients'].isNotEmpty
                          ? Column(
                              children: List.generate(
                                  resData["ingredients"].length, (index) {
                                var name =
                                    resData["ingredients"][index]["name"];
                                var unit =
                                    resData["ingredients"][index]["unit"];
                                var amount =
                                    resData["ingredients"][index]["amount"];
                                return Padding(
                                  padding: const EdgeInsets.only(top: 5),
                                  child: Align(
                                    alignment: Alignment.topLeft,
                                    child: AppText.appText(
                                        "${name}, ${amount} $unit",
                                        textColor: AppTheme.appColor),
                                  ),
                                );
                              }),
                            )
                          : SizedBox.shrink(),
                    ],
                  ),
                ),
              )
            ],
          ),
        );

        chatsProvider.regenerateLoaderLoading(true);
        chatsProvider.messageLoading(false);
        sender0ChatResponse(
            chefResponse: resData);
      }
    } else if (response.statusCode == 294) {
      print("jadhuhweuuqwh${response.data["error"]}");
      showSnackBar(context, "Payment required");
      chatsProvider.containerLoading(false);
      chatsProvider.messageLoading(false);
    }
  }

  void searchRecipeChatBot(chatBotResponseData, query) async {
    Map<String, dynamic> params = {};
    try {
      if (chatBotResponseData['media'] != null &&
          chatBotResponseData['media'].isNotEmpty) {
        params = {
          "search": query,
          "recipes": [],
        };

        for (int i = 0; i < chatBotResponseData['media'].length; i++) {
          params['recipes'].add({
            "url": chatBotResponseData['media'][i]['link'] ?? 'link not found',
            "recipe_id": chatBotResponseData['media'][i]['link']
                .toString()
                .split("-")
                .last,
            "title": chatBotResponseData['media'] == null
                ? chatBotResponseData['answerText']
                : chatBotResponseData['media'][i]['title'],
            "image":
                chatBotResponseData['media'][i]['image'] ?? 'image not found',
          });
        }
      } else {
        params = {
          "search": query,
          // "recipes[1][url]": 'link not found',
          // "recipes[1][recipe_id]": '1234',
          "recipes[1][title]": chatBotResponseData['answerText'],
          // "recipes[1][image]": 'image not found',
        };
      }

      var responseChatBot =
          await dio.post(path: AppUrls.searchRecipe, data: params);
      print("api_response $responseChatBot");
    } catch (e) {
      print(e);
    }
  }

  void changeCondition() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    prefs.setInt(PrefKey.conditiontoLoad, 0);
    String? ids = prefs.getString(PrefKey.id);
    setState(() {
      id = ids!;
    });
  }

  sender1QueryResponse({query}) async {
    var response;
    Map<String, dynamic> params = {};
    params.addAll({
      "user_id": "${id}",
      "is_sender": 1,
      "message": query
    });
    response = await dio.post(path: AppUrls.store_chat, data: params);
    if (response.statusCode == 200) {
      print("is data is being save or not${response.data}");
    }
  }

  sender0ChatResponse({chefResponse}) async {
    var response;
    Map<String, dynamic> params = {};
    var encodedData = json.encode(chefResponse);
    print("encodedDataaaaaaaa${encodedData}");
    params.addAll({
      "user_id": "${id}",
      "is_sender": 0,
      "message": encodedData
    });
    response = await dio.post(path: AppUrls.store_chat, data: params);
    if (response.statusCode == 200) {
      print("is data is being save or not${response.data}");
    }
  }




  getDatafromAPI(int page) async {
    var response;

    final chatsProvider=Provider.of<ChatBotProvider>(context, listen: false);
    chatsProvider.containerLoading(false);



    response = await dio.get(path: AppUrls.get_chat+"?page="+"$page");
    if (response.statusCode == 200) {
      if (response.data != null) {
        ChatgptModel chatgptModel = ChatgptModel.fromJson(response.data);
        total_page=chatgptModel.data.chat.lastPage;
        List<ChatData> data = <ChatData>[];
        data.addAll(chatgptModel.data.chat.chatData);
        data=data.reversed.toList();
        list.insertAll(0,data);
        if(current_page==1) {
          setState(() {
            checkScroll = true;
          });
        }
        isLoadingMore = false;
        print("Data List ${list.length}");
        chatsProvider.displayChatsWidget.clear();
        for (ChatData chatData in list) {
            if (chatData.isSender == 1) {
              chatsProvider.displayChatWidgets(
                Stack(
                  alignment: Alignment.topRight,
                  children: [
                    Align(
                      alignment: Alignment.topRight,
                      child: Padding(
                        padding: const EdgeInsets.symmetric(
                            horizontal: 8.0, vertical: 8),
                        child: Container(
                          margin: const EdgeInsets.symmetric(
                              vertical: 4, horizontal: 14),
                          padding: const EdgeInsets.symmetric(
                              vertical: 10, horizontal: 10),
                          decoration: BoxDecoration(
                            color: AppTheme.appColor,
                            borderRadius: const BorderRadius.only(
                              topLeft: Radius.circular(20),
                              bottomLeft: Radius.circular(20),
                              bottomRight: Radius.circular(10),
                              topRight: Radius.circular(0),
                            ),
                          ),
                          child: AppText.appText(
                              "${chatData.message}",
                              textColor: AppTheme.whiteColor),
                        ),
                      ),
                    ),
                  ],
                ),
              );
            } else if (chatData.isSender == 0) {
              // Map<String, dynamic> decodedData = json.decode(chatData.message);
              String message = chatData.message;
              Map<String, dynamic> jsonMessage = json.decode(message);
              MessageModel messageModel = MessageModel.fromJson(jsonMessage);
              chatsProvider.displayChatWidgets(
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Padding(
                      padding:
                      const EdgeInsets.symmetric(horizontal: 8.0, vertical: 8),
                      child: Container(
                        margin:
                        const EdgeInsets.symmetric(vertical: 4, horizontal: 14),
                        padding:
                        const EdgeInsets.symmetric(
                            vertical: 10, horizontal: 10),
                        decoration: BoxDecoration(
                          color: AppTheme.whiteColor,
                          borderRadius: const BorderRadius.only(
                            topLeft: Radius.circular(0),
                            bottomLeft: Radius.circular(10),
                            bottomRight: Radius.circular(20),
                            topRight: Radius.circular(20),
                          ),
                        ),
                        child: AppText.appText(
                          messageModel.recipeName.toString(),
                          textColor: AppTheme.appColor,
                        ),
                      ),
                    ),
                    const SizedBox(width: 4),
                    Padding(
                      padding:
                      const EdgeInsets.symmetric(horizontal: 8.0, vertical: 8),
                      child: Container(
                        margin:
                        const EdgeInsets.symmetric(vertical: 4, horizontal: 14),
                        padding:
                        const EdgeInsets.symmetric(
                            vertical: 10, horizontal: 10),
                        decoration: BoxDecoration(
                          color: AppTheme.whiteColor,
                          borderRadius: const BorderRadius.only(
                            topLeft: Radius.circular(0),
                            bottomLeft: Radius.circular(10),
                            bottomRight: Radius.circular(20),
                            topRight: Radius.circular(20),
                          ),
                        ),
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.start,
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            messageModel.instructions!.isNotEmpty
                                ? AppText.appText("Instructions:",
                                textColor: AppTheme.appColor,
                                fontSize: 20,
                                fontWeight: FontWeight.bold)
                                : SizedBox.shrink(),
                            messageModel.instructions!.isNotEmpty
                                ? Align(
                              alignment: Alignment.topLeft,
                              child: Column(
                                mainAxisAlignment: MainAxisAlignment.start,
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: messageModel.instructions!
                                    .map<Widget>(
                                      (item) =>
                                      Padding(
                                        padding: const EdgeInsets.only(
                                            top: 3, bottom: 3),
                                        child: AppText.appText(
                                          "${item}",
                                          textColor: AppTheme.appColor,
                                        ),
                                      ),
                                )
                                    .toList(),
                              ),
                            )
                                : SizedBox.shrink(),
                            const SizedBox(width: 4),
                            messageModel.ingredients!.isNotEmpty
                                ? AppText.appText("Ingredients:",
                                textColor: AppTheme.appColor,
                                fontSize: 20,
                                fontWeight: FontWeight.bold)
                                : SizedBox.shrink(),
                            messageModel.ingredients!.isNotEmpty
                                ? Column(
                              children: List.generate(
                                  messageModel.ingredients!.length, (index) {
                                var name =
                                    messageModel.ingredients![index].name;
                                var unit =
                                    messageModel.ingredients![index].unit;
                                var amount = messageModel.ingredients![index]
                                    .amount;
                                return Padding(
                                  padding: const EdgeInsets.only(top: 5),
                                  child: Align(
                                    alignment: Alignment.topLeft,
                                    child: AppText.appText(
                                        "${name}, ${amount} $unit",
                                        textColor: AppTheme.appColor),
                                  ),
                                );
                              }),
                            )
                                : SizedBox.shrink(),
                          ],
                        ),
                      ),
                    )
                  ],
                ),
              );
            }

        }
      } else {
        print('Response data is empty.');
      }
    } else {
      print('Request failed with status: ${response.statusCode}');
    }



  }

   getIdsfromSharedPref()async {
    SharedPreferences prefs= await SharedPreferences.getInstance();


  }


}
